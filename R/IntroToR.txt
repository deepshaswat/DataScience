Basic of R

Variables:
i/p: 1+2
o/p: [1] 3

#providing input into variables. No need to declare based on the data types
i/p: height <- 2
i/p: width <- 4

i/p: height
o/p: [1] 4

#command to list all the objects in the workspace
i/p: ls()
o/p: [1] "height" "width"

i/p: area <- height * width
o/p: [1]


R Script:

#File name with .R extension
rectangle.R
# hash is used for commenting
height <- 2
width <- 4
area <- height * width
#area will print the area
area

#Arithmetic Operations

# Addition
5 + 5

# Subtraction
5 - 5

# Multiplication
3 * 5
# pi is used in place of the value of pi = 3.142

 # Division
(5 + 5) / 2

# Exponentiation
2 ^ 5

# Modulo
28 %% 6

#rm() function with the object passed as a parameter is used to remove the object from the workspace
rm(area)

#class() method is used to check the datatype of a value or variable
class(5)
[1] "numeric"

#data types:

#Logical datatypes have the following values
class(TRUE) (FALSE) (NA)
[1] "logical"

i/p: 2
[1] 2

i/p: 2.5
[1] 2.5

i/p: 2L
[1] 2

class(2)
[1] "numeric"

class(2L)
[1] "integer"

# is() function is used to check the class of the value
is.numeric(2)
[1] TRUE

is.numeric(2L)
[1] TRUE

is.integer(2)
[1] FALSE

is.integer(2L)
[1] TRUE

character, double, complex, raw

#as function is used to convert one data type to other
as.numeric(TRUE)
[1] 1

as.character(4)
[1] "4"

as.numeric("4.5")
[1] 4.5

as.integer(4.5)
[1] 4

as.numeric("hello")
[1] NA


#Vector: similar to array, list of same data types

#c() is used to create a vector
remain <- c(10,20,30)
remain
[1] 10 20 30

# each element of a vector is of length 1, so for remain variable the length is 3

is.vector(remain)		#used to check if the variable is of type vector

[1] TRUE
suits <- c("a", "b", "c")
#names(<vector_name>) <- <vector> is used to provide name to the vector values
names(remain) <- suits
i/p: remain
o/p:
a 	b 	c
10	20	30

remain <- c(a = 1, b = 2, c = 3)		#can be used with "" for characters


Vector Arithmetics:
earnings <- c(50, 100, 30)

# operation with any arithmetic operators will make the operation with all the elements of the vector
earnings * 3		#similar with all operators
[1] 150 300 90

# when a vector is operated with another vector, the operations are that to the matrix operation. Each element is added or subtracted with the corresponding elements of the other vector
expenses <- c(30, 40, 80) 	#similar to matrix
earning - expenses
[1] 20 60 -50

# sum() is used to add all the elements of a vector
bank <- earnings - expenses
sum(bank)
[1] 30

# for comparison of two vectors, the comparison is done at the element level
earnings > expenses
[1] TRUE TURE FALSE

Subsetting Vectors:
remain <- c(spades = 11, hearts = 23, diamonds = 11, clubs = 13)
# accessing each element
i/p: remain[1]
o/p:
spades
11

i/p: remain["spades"]
o/p:
spades
11

# creating a subset vector
remain_black <- remain[c[1,4]]
remain_black
spades 	clubs
11		13

remain_black <- remain[c[4,1]]
remain_black
clubs	spades
13		11

# providing the index of the subset vector from 2 to 5
remain[2:5]

remain["spades", "diamonds"]
remain[-1]		#deleting the vector
remain[-c(1, 2)]		#deleting multiple vectors

#logical vector
remain[c(FALSE, TRUE, FALSE, TRUE)]	#deletes the vector with false values


remain[c(FALSE, TRUE, FALSE, TRUE)] is similar to remain[c(FALSE, TRUE)]
# repeats the logical vector operation till the size of the vector

Logical Operator

#comments required

> poker_vector <- c(140, -50, 20, -120, 240)
... roulette_vector <- c(-24, -50, 100, -350, 10)
... days_vector <- c("Monday", "Tuesday", "Wednesday", "Thursday", "Friday")
... names(poker_vector) <- days_vector
... names(roulette_vector) <- days_vector
> selection_vector <- poker_vector>0
> selection_vector
   Monday   Tuesday Wednesday  Thursday    Friday
     TRUE     FALSE      TRUE     FALSE      TRUE



> poker_profits <- poker_vector[selection_vector]
> poker_profits
   Monday Wednesday    Friday
      140        20       240
>
---------------------------

# Casino winnings from Monday to Friday
poker_vector <- c(140, -50, 20, -120, 240)
roulette_vector <- c(-24, -50, 100, -350, 10)
days_vector <- c("Monday", "Tuesday", "Wednesday", "Thursday", "Friday")
names(poker_vector) <- days_vector
names(roulette_vector) <- days_vector

# Select amounts for profitable roulette days: roulette_profits
select <- roulette_vector>0
roulette_profits <- roulette_vector[select]

# Sum of the profitable roulette days: roulette_total_profit
roulette_total_profit <- sum(roulette_profits)

# Number of profitable roulette days: num_profitable_days
num_profitable_days <- sum(select)
---------------------------

# Select the player's score for the third game: player_third
player_third <- player[3]

# Select the scores where player exceeds hous: winning_scores
winning_scores <- player[player > house]

# Count number of times player < 18: n_low_score
n_low_score <- sum(player < 18)
---------------------------------

Matrix: A natural extension of a vector

matrix()
#Matrix specified via num of rows or columns for a value of 1 to 6. It automatically depicts the col or row automatically by the no of elements.
matrix(1:6, nrow = 2)
    [,1] [,2] [,3]
[1,] 1    3     5
[2,] 2    4     6

matrix(1:6, ncol = 3)
    [,1] [,2] [,3]
[1,] 1    3     5
[2,] 2    4     6

matrix(1:6, nrow = 2, byrow = TRUE)
    [,1] [,2] [,3]
[1,] 1    2     3
[2,] 4    5     6

# if the value is not sufficient it recycles the values provided
matrix(1:3, nrow = 2, ncol = 3)
    [,1] [,2] [,3]
[1,] 1    3     2
[2,] 2    1     3

if the value provided cannot be recycled in exact, warning msg is thrown
matrix(1:4, nrow = 2, ncol = 3)
    [,1] [,2] [,3]
[1,] 1    3     1
[2,] 2    4     2

cbind(1:3, 1:3)


rbind(1:3, 1:3)
# Star Wars box office in millions (!)
new_hope <- c(460.998, 314.4)
empire_strikes <- c(290.475, 247.900)
return_jedi <- c(309.306, 165.8)

# Create star_wars_matrix
star_wars_matrix <- rbind(new_hope, empire_strikes, return_jedi)
-----------------------------------------

#RowSum()

# Star Wars box office in millions (!)
new_hope <- c(460.998, 314.4)
empire_strikes <- c(290.475, 247.900)
return_jedi <- c(309.306, 165.8)
star_wars_matrix <- rbind(new_hope, empire_strikes, return_jedi)
colnames(star_wars_matrix) <- c("US", "non-US")
rownames(star_wars_matrix) <- c("A New Hope", "The Empire Strikes Back", "Return of the Jedi")

# Calculate the worldwide box office: worldwide_vector
worldwide_vector <- rowSums(star_wars_matrix)


m <- matrix(1:6, nrow = 2, byrow = TRUE)
rbind(m, 7:9)
    [,1] [,2] [,3]
[1,] 1    2     3
[2,] 4    5     6
[3,] 7    8     9

naming a matrix: rowname(), colname()
m <- matrix(1:6, nrow = 2, byrow = TRUE,
        dimnames = list(c("row1", "row2"),
        c("col1", "col2", "col3")))

#creating matrix
m <- matrix(sample(1:15,12), nrow=3)
accessing an element
m[1,3]
for a single row
m[3,]
for a column
m[,3]

for m[4] # with no comma, it counts for column till 4th element

m[2, c(2,3)] #this will select the elements from the 2nd row, 2nd and 3rd elements
rownames, colnames


Factors:
		blood <- c("B", "AB", "O", "A", "O", "O", "A", "B")
		blood_factor <- factor(blood)
		blood_factor
		[1] B AB O A O O A B
		Levels: A AB B Operations	#sorted alphabetically and all the values are stored as an integer value.

		str(blood_factor)
		Factor w/ 4 levels: "A","AB","B",O": 3 2 4 1 4 4 1 3
		levels, labels and ordered arguments in factor
		factor(<name>, ordered = TRUE, levels = c(<ascending order>))

Summary():
 # Defintion of survey_vector and survey_factor
> survey_vector <- c("R", "L", "L", "R", "R")
> survey_factor <- factor(survey_vector, levels = c("R", "L"), labels = c("Right", "Left"))
>
> # Summarize survey_vector
>  summary(survey_vector)
   Length     Class      Mode
        5 character character
>
> # Summarize survey_factor
>  summary(survey_factor)
Right  Left
    3     2


Lists:
		song <- list("Song", 190, 5)
		names(song) <- c("title", "duration", "track")
		>song
o/p 	$title
		title

		$duration
		190

		$track
		5

		to display: str(song)

		subset list: single [] will subset the list but will return the list.
		normal will be [[]] will return the string

		For 2 elements:

		Extending list:
		song[["sent"]] <- friends
		song$sent <- friends 	#both the above statements are the same

Data Frames:

Datasets:
E.g.: People: name, age.. = list of variables.
Rows and columns with different data types.
Elements of a column has to be of same type

Data frame is mostly imported.
Can be created using data.frame()

name, age and child are the vectors
df <- data.frame(name, age, child)
names(df) <- c()

str(df)
rows are the observations and the columns are the variables.

By default all the values are stored in data frames as factors. To remove the storing of the strings as factors; i.e. the values as the numbers, use the variable while creating the data frames, stringsAsFactors = FALSE

head() -> displays the first observation of the dataset
tail() the last observation
dim() -> the dimensions of the dataset

Subsetting the Data Frame
both [], [[]] and $ can be used

people[3,2]
3rd row, 2nd column
people[3,]
entire row

people[,2] or people[,"age"]
entire 2nd row

people[2] will return the entire 2nd row but as a data frame

single square bracket the value returned is a data frame but for double sq brackets and $, the value returned is either matxix or vector


Extending the data frame:
adding the column, height

people[["height"]] <- height

or people$height <- height

cbind(people, weight)

rbind(people, tom) : used to add the row

Sorting the data frame

sort(people$age) : returns only the order of the age and returns a vector

ranks <- order(people$age)

people[ranks, ] #will sort the results in the ascending order of the age

for descending:
people[order(people$age, desreasing = TRUE), ]
order(people$age, desreasing = TRUE) : is used in place of rank directly in the variable


Subsetting the data frame using the subset method:
 planets_with_rings_df <- subset(planets_df, has_rings == TRUE)

 What it does is subset the data frame planets_df for the column has_rings when the column has the value TRUE

deleting a column:
a <- subset(countries_df, select = c(1,2,5))
This will select the columns 1,2,5

select = -c(1,2,5)
This will select all columns except 1,2 and 5


Basic Graphics:

plot() and hist()

plot():
  different inputs -> different plots
  plot(countries$continent) : this is used to plot a graph for the countries DF where continent is a factor. R recongnises the values of the factor and plot it as no of countries in each continents. Takes the bar graph

  for population it takes the point
  can be plotted for two variables

  first element in the plot() is a variable for x axis and 2nd variable for the y-axis



Hist():
  hist(africa$population, breaks = 10) used to break the histogram to 10 bars.



Customizing Plots:
  Mercury : temp and pressure

  plot(mercury$temperature, mercury$pressure,
  xlab = "temperature",   #x-axis label
  ylab = "Pressure",      #y-axis label
  main = "T vs P for Mercury",    #plot title
  type = "o",   #plot type; o specifies both line and point l specifies the line
  col = "orange")

?par() will display help for par
  par() : parameter is displayed for all the plots after the command

other graphical parameters:
  col.main = "darkgray", #color of the main title
  cex.axis  = 0.6,    # font size of the axis labels
  lty = 5,    #line type
  pch = 4,    #plot symbol
  sub = "Text" #subtitle below the x-axis label

Customizing the histogram:
hist(x, breaks = "Sturges",
   freq = NULL, probability = !freq,
   include.lowest = TRUE, right = TRUE,
   density = NULL, angle = 45, col = NULL, border = NULL,
   main = paste("Histogram of" , xname),
   xlim = range(breaks), ylim = NULL,
   xlab = xname, ylab,
   axes = TRUE, plot = TRUE, labels = FALSE,
   nclass = NULL, warn.unused = TRUE, ...)
   The fill of the bars is "cyan" (col argument).
The color of the bars' borders are "red" (border argument).

Multiple Plots:
  mfrow parameter in par()

  par(mfrow = c(2,2))   #or mfcol
  to add the graph in a same plot for 4 graph

  to reset:
  par(mfrow = c(1,1))

layout():
  grid <- matrix(c(1,1,2,3), nrow = 2, ncol = 2, byrow = TRUE)
  layout(grid)
  to reset: layout(1)

old_par <- par()
par(old_par)

Stack graphical elements:
  lm_sales <- lm(<xaxis> ~ <yaxis>)
  abline(coef(lm_sales), lwd = 2)

  in place of abline(), points(), segments(), lines() and text() can be used

  ranks <- order(shop$ads)

  lines(shop$ads[ranks], shop$sales[ranks])
